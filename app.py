import numpy as np
import sounddevice as sd
import whisper
from collections import deque
import keyboard
import torch
import os
import sys

# ==== Settings / –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
SAMPLE_RATE = 16000  # Do not change / –ù–µ –∏–∑–º–µ–Ω—è–π
CHUNK_DURATION = 0.3  # Do not change / –ù–µ –∏–∑–º–µ–Ω—è–π
WHISPER_MODEL = 'small'  # tiny / base / small / medium / large
THRESHOLD = 0.015  # Sound sensitivity / –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
SILENCE_DURATION = 0.3  # Silence stop delay / –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
PRE_RECORD_SECONDS = 1.0  # Audio buffer / –ë—É—Ñ–µ—Ä
LANGUAGE = 'en'  # Language / –Ø–∑—ã–∫

# === Hotwords / –ì–æ—Ä—è—á–∏–µ —Å–ª–æ–≤–∞ ===
hotkey0 = ""
hotkey1 = "healing"
hotkey2 = ""
hotkey3 = "fireball"
hotkey4 = ""
hotkey5 = ""
hotkey6 = ""
hotkey7 = ""
hotkey8 = ""
hotkey9 = ""
stop_word = "—Å—Ç–æ–ø"
stop_word2 = "stop"

# === Logging / –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
# log_buffer = deque(maxlen=100)

log_history = []

def log(msg):
    global log_history
    line = msg if isinstance(msg, str) else str(msg)
    log_history.append(line)
    if len(log_history) > 100:
        del log_history[:-50]  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 / Last 50 prints

    # –°–¥—Ñ–∫ —ã—Å–∫—É—É—Ç / –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')

    # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    for l in log_history[-50:]:
        print(l)


# === Send hotkey / –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏ ===
def send_hotkey(key):
    if 0 <= key <= 9:
        try:
            keyboard.send(str(key))
        except ValueError as e:
            log(f"‚ùå Error while sending / –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        log("‚ùå Error: key out of range 0‚Äì9 / –û—à–∏–±–∫–∞: –∫–ª—é—á –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0‚Äì9")

# === Handle command / –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã ===
def handle_command(text):
    text = text.strip().lower()
    if stop_word in text or stop_word2 in text:
        log("üö© Command 'stop' received / –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '—Å—Ç–æ–ø' ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return False

    for i in range(10):
        hotkey = globals().get(f"hotkey{i}")
        if hotkey and hotkey in text:
            log(f"üéØ Hotkey{i} triggered ('{hotkey}') / –°—Ä–∞–±–æ—Ç–∞–ª hotkey{i} ('{hotkey}') ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º {i}")
            send_hotkey(i)
            return True

    log("ü§∑ Command not recognized / –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
    return True

# === Volume check / –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ===
def is_loud(data, threshold):
    return np.max(np.abs(data)) > threshold

# === Main listen loop / –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ===
def listen_loop():
    log("üéß Starting infinite listening loop / –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...")

    buffer_chunks = int(PRE_RECORD_SECONDS / CHUNK_DURATION)
    pre_buffer = deque(maxlen=buffer_chunks)

    device_info = sd.query_devices(kind='input')
    input_channels = device_info['max_input_channels']
    log(f"üéöÔ∏è Detected input channels: {input_channels} / –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {input_channels}")

    while True:
        log("üîé Waiting for sound... / –û–∂–∏–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞...")

        recording = []
        silence_time = 0.0
        recording_started = False
        stop_stream = False

        def callback(indata, frames, time_info, status):
            nonlocal recording, silence_time, recording_started, stop_stream

            volume = np.linalg.norm(indata)
            log("üîä MIC Volume / –ì—Ä–æ–º–∫–æ—Å—Ç—å: {:.5f}".format(volume))

            if indata.shape[1] > 1:
                mono_data = np.mean(indata, axis=1, keepdims=True)
            else:
                mono_data = indata

            pre_buffer.append(mono_data.copy())

            if is_loud(mono_data, THRESHOLD):
                if not recording_started:
                    log("üî¥ Sound detected / –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...")
                    recording.extend(list(pre_buffer))
                    recording_started = True
                silence_time = 0.0
                recording.append(mono_data.copy())
            elif recording_started:
                silence_time += CHUNK_DURATION
                log(f"üü° Silence {silence_time:.2f} sec... / –¢–∏—à–∏–Ω–∞ {silence_time:.2f} —Å–µ–∫...")
                recording.append(mono_data.copy())
                if silence_time >= SILENCE_DURATION:
                    log("‚èπÔ∏è Recording finished / –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    stop_stream = True

        with sd.InputStream(callback=callback,
                            channels=input_channels,
                            samplerate=SAMPLE_RATE,
                            blocksize=int(SAMPLE_RATE * CHUNK_DURATION)):
            while not stop_stream:
                sd.sleep(int(CHUNK_DURATION * 1000))

        if not recording:
            log("üü° No sound detected / –ó–≤—É–∫ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            continue

        log(f"‚úÖ Processing {len(recording)} chunks / –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(recording)} —á–∞–Ω–∫–æ–≤...")
        full = np.concatenate(recording).flatten().astype(np.float32)

        try:
            result = model.transcribe(full, language=LANGUAGE, fp16=FP16)
            log("üìù Recognized text / –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: " + result["text"])
            if not handle_command(result["text"]):
                break
        except Exception as e:
            log(f"‚ùå Error during recognition / –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")

# === Entry point / –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    global model, DEVICE, FP16

    if torch.cuda.is_available():
        DEVICE = "cuda"
        FP16 = True
        log("‚ö° Using GPU (CUDA) / –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU (CUDA)")
    else:
        DEVICE = "cpu"
        FP16 = False
        log("üñ• Using CPU / –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU")

    log(f"CUDA available / CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        log(f"Device qty: {torch.cuda.device_count()} / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {torch.cuda.device_count()}")
        log(f"Device name: {torch.cuda.get_device_name(0)} / –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {torch.cuda.get_device_name(0)}")

    log("üß† Loading Whisper model / –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper...")
    model = whisper.load_model(WHISPER_MODEL, device=DEVICE)

    listen_loop()

if __name__ == "__main__":
    main()
